<Project Sdk="Microsoft.NET.Sdk">
 
  <PropertyGroup>
    <TargetFrameworks>net7.0-android;net7.0-ios;net7.0-maccatalyst</TargetFrameworks>
    <TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(TargetFrameworks);net7.0-windows10.0.19041.0</TargetFrameworks>
 
    <OutputType>Exe</OutputType>
    <RootNamespace>MAUI_test_app</RootNamespace>
    <UseMaui>true</UseMaui>
    <SingleProject>true</SingleProject>
    <ImplicitUsings>enable</ImplicitUsings>
 
    <!-- Application Metadata -->
    <ApplicationTitle>MAUI test app</ApplicationTitle>
    <ApplicationId>com.companyname.maui_test_app</ApplicationId>
    <ApplicationIdGuid>77d958ee-e7cd-4e40-8a9b-d3d3a0f9502e</ApplicationIdGuid>
    <ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>
    <ApplicationVersion>1</ApplicationVersion>
 
    <!-- Supported Platforms -->
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">11.0</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">13.1</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">21.0</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</SupportedOSPlatformVersion>
    <TargetPlatformMinVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</TargetPlatformMinVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'tizen'">6.5</SupportedOSPlatformVersion>
  </PropertyGroup>
 
  <ItemGroup>
    <!-- Resources -->
    <MauiIcon Include="Resources\AppIcon\appicon.svg" ForegroundFile="Resources\AppIcon\appiconfg.svg" Color="#512BD4" />
    <MauiSplashScreen Include="Resources\Splash\splash.svg" Color="#512BD4" BaseSize="128,128" />
    <MauiImage Include="Resources\Images\*" />
    <MauiImage Update="Resources\Images\dotnet_bot.svg" BaseSize="168,208" />
    <MauiFont Include="Resources\Fonts\*" />
    <MauiAsset Include="Resources\Raw\**" LogicalName="%(RecursiveDir)%(Filename)%(Extension)" />
  </ItemGroup>
 
  <ItemGroup>
    <!-- Dependencies -->
    <PackageReference Include="Microsoft.Data.SqlClient" Version="5.1.0" />
    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="7.0.0" />
    <PackageReference Include="System.Data.SqlClient" Version="4.8.5" />
  </ItemGroup>
 
  <ItemGroup>
    <!-- XAML Pages -->
    <MauiXaml Update="RecipePage.xaml">
      <Generator>MSBuild:Compile</Generator>
    </MauiXaml>
  </ItemGroup>
 
</Project>
https://github.com/Hiuston957/MyFitCook-
MAUI_App/blob/master/MAUI%20test%20app/MainPage.xaml.cs
using Microsoft.Maui.Controls.Xaml;
using System.Collections.ObjectModel;
using System.Data.SqlClient;
 
namespace MAUI_test_app;
 
public partial class MainPage : ContentPage
{
    public MainPage()
    {
        InitializeComponent();
 
        var userId = Preferences.Default.Get("userId", "Unknown");
        var userPass = Preferences.Default.Get("userPass", "Unknown");
        var user = new User(userId, userPass);
 
        Chats = new ObservableCollection<FastList>();
        BindingContext = this;
    }
 
    private void ShowAvailableRecipes(object sender, EventArgs e)
    {
        var recipeName = RecipeName?.Text;
        var serverLocation = Preferences.Default.Get("serverLoc", "Unknown");
 
        using var connection = new SqlConnection(serverLocation);
        connection.Open();
 
        string query = string.IsNullOrWhiteSpace(recipeName)
            ? "SELECT NULL WHERE 1 = 0"
            : recipeName.Equals("all", StringComparison.OrdinalIgnoreCase)
                ? "SELECT ID_Recipe, Name FROM Recipes"
                : $"SELECT ID_Recipe, Name FROM Recipes WHERE Name LIKE '%{recipeName}%';";
 
        using var command = new SqlCommand(query, connection);
        using var reader = command.ExecuteReader();
 
        Chats.Clear();
 
        while (reader.Read())
        {
            var id = reader.GetInt32(0);
            var name = reader.GetString(1);
 
            Chats.Add(new FastList($"{id}. {name}"));
        }
    }
 
    private async void NavigateToRecipePage(object sender, EventArgs e)
    {
        if (sender is Label label && int.TryParse(new string(label.Text.Where(char.IsDigit).ToArray()), out int recipeId))
        {
            Preferences.Default.Set("recId", recipeId);
            await Shell.Current.GoToAsync("RecipePage");
        }
    }
 
    public ObservableCollection<FastList> Chats { get; set; }
 
    public record FastList(string Title);
}


